<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RestRPC.Framework</name>
    </assembly>
    <members>
        <member name="M:RestRPC.Framework.BuiltinPlugins.Echo.Respond(System.Object[])">
            <summary>
            Returns the input args concatenated as a string
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:RestRPC.Framework.BuiltinPlugins.PluginList">
            <summary>
            A built-in plugin of RestRPC
            Handles "pluginlist" request and returns the list of plugins loaded
            </summary>
        </member>
        <member name="M:RestRPC.Framework.BuiltinPlugins.PluginList.Respond(System.Object[])">
            <summary>
            Gets the list of plugins loaded in the plugin manager
            </summary>
            <param name="args">Not used</param>
            <returns>An array of ID strings of plugins loaded</returns>
        </member>
        <member name="T:RestRPC.Framework.ConnectionState">
            <summary>
            State of the socket connection in a component
            </summary>
        </member>
        <member name="F:RestRPC.Framework.ConnectionState.Disconnected">
            <summary>
            Socket is not connected
            </summary>
        </member>
        <member name="F:RestRPC.Framework.ConnectionState.Connecting">
            <summary>
            Socket is connecting to server
            </summary>
        </member>
        <member name="F:RestRPC.Framework.ConnectionState.Connected">
            <summary>
            Socket is connected to server
            </summary>
        </member>
        <member name="F:RestRPC.Framework.ConnectionState.Closing">
            <summary>
            Socket is closing
            </summary>
        </member>
        <member name="T:RestRPC.Framework.Messages.Outputs.RrpcResponse">
            <summary>
            This message is sent to server as a response to a request
            </summary>
        </member>
        <member name="T:RestRPC.Framework.Plugins.Plugin">
            <summary>
            A plugin extends the request types RestRPC can handle
            </summary>
        </member>
        <member name="M:RestRPC.Framework.Plugins.Plugin.Dispatch(System.String,System.Object[])">
            <summary>
            Dispatch another plugin loaded in Plugin Manager
            </summary>
            <param name="targetID">Callee's plugin ID</param>
            <param name="args">Arguments passed with the call</param>
            <returns>Object returned by the callee</returns>
        </member>
        <member name="M:RestRPC.Framework.Plugins.Plugin.SetCache(System.String,System.Object)">
            <summary>
            Requests the key-value pair be cached in this plugin's cache map, on the server
            </summary>
            <param name="key">Key of the entry in the cache map</param>
            <param name="value">Value of the entry in the cache map</param>
        </member>
        <member name="M:RestRPC.Framework.Plugins.Plugin.Respond(System.Object[])">
            <summary>
            Respond to a call to this plugin's procedure
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:RestRPC.Framework.Plugins.PluginLoader">
            <summary>
            Plugin loader provides functionalities to load plugins from an external assembly
            </summary>
        </member>
        <member name="M:RestRPC.Framework.Plugins.PluginLoader.LoadPluginsFromAssembly(System.String)">
            <summary>
            Get Plugin subclasses from an assembly and instantiate them
            </summary>
            <param name="fileName">Filename of the assembly containing plugins</param>
            <returns>A list containing the plugin instances</returns>
        </member>
        <member name="M:RestRPC.Framework.Plugins.PluginLoader.LoadAllPluginsFromDir(System.String,System.String)">
            <summary>
            Loads all plugins from a directory, recursively
            </summary>
            <param name="dirName">The directory to search for plugins in</param>
            <param name="pattern">Search pattern. e.g. "*.dll" for dll files</param>
            <returns>The list of plugins found in the directory, all instantiated</returns>
        </member>
        <member name="T:RestRPC.Framework.Plugins.PluginManager">
            <summary>
            Plugin manager manages plugins which contains procedures that can be called
            </summary>
        </member>
        <member name="P:RestRPC.Framework.Plugins.PluginManager.ProcedureIDs">
            <summary>
            Gets the ID of procedures registered in this plugin manager
            </summary>
        </member>
        <member name="P:RestRPC.Framework.Plugins.PluginManager.TickablePlugins">
            <summary>
            Gets a list of tickable plugins registered within the plugin manager
            </summary>
        </member>
        <member name="M:RestRPC.Framework.Plugins.PluginManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:RestRPC.Framework.Plugins.PluginManager.RegisterPlugin(System.String,RestRPC.Framework.Plugins.Plugin)">
            <summary>
            Registers a plugin. If plugin is tickable, it's also added to the tickable list
            </summary>
            <param name="procedureID">ID of the procedure. Must be unique or register will fail</param>
            <param name="plugin">The plugin to be registered</param>
            <returns>True if plugin is successfully registered</returns>
        </member>
        <member name="M:RestRPC.Framework.Plugins.PluginManager.UnregisterPlugin(RestRPC.Framework.Plugins.Plugin)">
            <summary>
            Unregisters the plugin's procedure and removes it from being ticked if tickable
            </summary>
            <param name="plugin">The plugin instance to be unregistered. It must be already registered</param>
        </member>
        <member name="M:RestRPC.Framework.Plugins.PluginManager.RegisterProcedure(System.String,RestRPC.Framework.Plugins.Procedure)">
            <summary>
            Registers a procedure
            </summary>
            <param name="procedureID">ID of the procedure</param>
            <param name="procedure"></param>
            <returns></returns>
        </member>
        <member name="M:RestRPC.Framework.Plugins.PluginManager.UnregisterProcedure(System.String)">
            <summary>
            Unregisters a procedure 
            If this is used to unregister a tickable plugin's procedure, the plugin itself will not be unticked
            </summary>
            <param name="procedureID"></param>
        </member>
        <member name="T:RestRPC.Framework.Plugins.IUpdate">
            <summary>
            Implemented by plugins that need to be ticked every frame
            </summary>
        </member>
        <member name="M:RestRPC.Framework.Plugins.IUpdate.Update">
            <summary>
            Runs an update cycle
            </summary>
        </member>
        <member name="T:RestRPC.Framework.Plugins.Procedure">
            <summary>
            Respond to a remote procedure call
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:RestRPC.Framework.LogType">
            <summary>
            Type of a log message
            </summary>
        </member>
        <member name="F:RestRPC.Framework.LogType.None">
            <summary>
            No type
            </summary>
        </member>
        <member name="F:RestRPC.Framework.LogType.Info">
            <summary>
            An info message
            </summary>
        </member>
        <member name="F:RestRPC.Framework.LogType.Warning">
            <summary>
            A warning message
            </summary>
        </member>
        <member name="F:RestRPC.Framework.LogType.Error">
            <summary>
            An error message
            </summary>
        </member>
        <member name="F:RestRPC.Framework.LogType.Debug">
            <summary>
            A debug message
            </summary>
        </member>
        <member name="F:RestRPC.Framework.LogType.All">
            <summary>
            All types of messages
            </summary>
        </member>
        <member name="T:RestRPC.Framework.Logger">
            <summary>
            Logger writes logs to a TextWriter
            </summary>
        </member>
        <member name="P:RestRPC.Framework.Logger.Writer">
            <summary>
            Gets the TextWriter logger is writing to
            </summary>
        </member>
        <member name="P:RestRPC.Framework.Logger.LogLevel">
            <summary>
            Gets the log level
            </summary>
        </member>
        <member name="M:RestRPC.Framework.Logger.Log(System.Object,RestRPC.Framework.LogType,System.IO.TextWriter)">
            <summary>
            Writes a log message using a specified log writer. Default writer will not be used for this message.
            </summary>
            <param name="message"></param>
            <param name="logType"></param>
            <param name="textWriter"></param>
        </member>
        <member name="M:RestRPC.Framework.Logger.Log(System.Object,RestRPC.Framework.LogType)">
            <summary>
            Writes a log message using the default log writer
            </summary>
            <param name="message"></param>
            <param name="logType"></param>
        </member>
        <member name="T:RestRPC.Framework.RrpcComponent">
            <summary>
            RestRPCComponent communicates with an RRPC server and handles in/out messages
            </summary>
        </member>
        <member name="P:RestRPC.Framework.RrpcComponent.Name">
            <summary>
            Gets the name of this RestRPC component
            </summary>
        </member>
        <member name="P:RestRPC.Framework.RrpcComponent.RemoteUri">
            <summary>
            Gets information on the remote this component is connecting to
            </summary>
        </member>
        <member name="P:RestRPC.Framework.RrpcComponent.PollingRate">
            <summary>
            Gets the rate the component polls messages from server
            </summary>
        </member>
        <member name="P:RestRPC.Framework.RrpcComponent.IsRunning">
            <summary>
            Gets an indicator whether the component is running network updates.
            </summary>
        </member>
        <member name="P:RestRPC.Framework.RrpcComponent.ConnectionState">
            <summary>
            Gets the state of WebSocket connection
            </summary>
        </member>
        <member name="P:RestRPC.Framework.RrpcComponent.PluginManager">
            <summary>
            Gets the instance of PluginManager in this component
            </summary>
        </member>
        <member name="M:RestRPC.Framework.RrpcComponent.#ctor(System.String,System.Uri,System.TimeSpan,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="componentName">The name of this RestRPC component</param>
            <param name="remoteUri">Remote server settings</param>
            <param name="pollingRate">Rate to poll messages from server</param>
            <param name="username">Username for HTTP auth</param>
            <param name="password">Password for HTTP auth</param>
        </member>
        <member name="M:RestRPC.Framework.RrpcComponent.#ctor(System.String,System.Uri,System.TimeSpan,System.String,System.String,System.IO.TextWriter,RestRPC.Framework.LogType)">
            <summary>
            Constructor
            </summary>
            <param name="componentName">The name of this RestRPC component</param>
            <param name="remoteUri">Remote server settings</param>
            <param name="pollingRate">Rate to poll messages from server</param>
            <param name="username">Username for HTTP auth</param>
            <param name="password">Password for HTTP auth</param>
            <param name="logWriter">Log writer</param>
            <param name="logLevel">Level of logging</param>
        </member>
        <member name="M:RestRPC.Framework.RrpcComponent.Start">
            <summary>
            Starts connection to the remote server. 
            The component will always attempt to reconnect if disconnected while it is running
            </summary>
        </member>
        <member name="M:RestRPC.Framework.RrpcComponent.Stop">
            <summary>
            Stops connection to the remote server. 
            All unprocessed inputs and unsent outputs will be discarded
            </summary>
        </member>
        <member name="M:RestRPC.Framework.RrpcComponent.Update">
            <summary>
            Updates RestRPCComponent. Should be called on every tick.
            </summary>
        </member>
    </members>
</doc>
